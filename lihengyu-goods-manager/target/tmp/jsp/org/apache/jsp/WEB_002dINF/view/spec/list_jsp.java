/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: jetty/9.4.20.v20190813
 * Generated at: 2020-03-10 12:38:14 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.view.spec;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class list_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("file:/D:/tools/repository/org/apache/taglibs/taglibs-standard-impl/1.2.5/taglibs-standard-impl-1.2.5.jar", Long.valueOf(1567840056000L));
    _jspx_dependants.put("jar:file:/D:/tools/repository/org/apache/taglibs/taglibs-standard-impl/1.2.5/taglibs-standard-impl-1.2.5.jar!/META-INF/c.tld", Long.valueOf(1425949870000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("    \r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<div>\r\n");
      out.write("\t<input id=\"queryName\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${queryName}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\"/>\r\n");
      out.write("\t<button type=\"button\" class=\"btn btn-primary\" onclick=\"query()\">\r\n");
      out.write("   \t查询 </button>\r\n");
      out.write("   \t\r\n");
      out.write("   \t<button type=\"button\" class=\"btn btn-primary\" onclick=\"delBatch()\">\r\n");
      out.write("   \t批量删除</button>\r\n");
      out.write("   \t\r\n");
      out.write("   \t\r\n");
      out.write("\t<button type=\"button\" class=\"btn btn-primary\" data-toggle=\"modal\" data-target=\"#staticBackdrop\">\r\n");
      out.write("   \t添加 </button>\r\n");
      out.write("   \t\r\n");
      out.write("   \t\r\n");
      out.write("   \t\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("<!-- Modal -->\r\n");
      out.write("<div class=\"modal fade\" id=\"staticBackdrop\" data-backdrop=\"static\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"staticBackdropLabel\" aria-hidden=\"true\">\r\n");
      out.write("  <div class=\"modal-dialog\" role=\"document\">\r\n");
      out.write("    <div class=\"modal-content\">\r\n");
      out.write("      <div class=\"modal-header\">\r\n");
      out.write("        <h5 class=\"modal-title\" id=\"staticBackdropLabel\">添加规格</h5>\r\n");
      out.write("         <button type=\"button\" onclick=\"addProp('#addspec')\"> 添加属性</button>\r\n");
      out.write("         \r\n");
      out.write("        <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\r\n");
      out.write("          <span aria-hidden=\"true\">&times;</span>\r\n");
      out.write("        </button>\r\n");
      out.write("        \t\r\n");
      out.write("      </div>\r\n");
      out.write("      <div class=\"modal-body\">\r\n");
      out.write("        \t<form id=\"addspec\">\r\n");
      out.write("        \t\t <div class=\"form-group\">\r\n");
      out.write("    \t\t\t\t<label for=\"specName\">规格名称</label>\r\n");
      out.write("    \t\t\t\t<input type=\"text\" class=\"form-control\" name=\"specName\" id=\"specName\" aria-describedby=\"specNamelHelp\">\r\n");
      out.write("    \t\t\t\t<small id=\"specNamelHelp\" class=\"form-text text-muted\">请输入规格名称</small>\r\n");
      out.write("  \t\t\t\t</div>\r\n");
      out.write("  \t\t\t\t<div class=\"form-group form-group-proper\">\r\n");
      out.write("    \t\t\t\t<label for=\"inputAddress\">属性值</label>\r\n");
      out.write("    \t\t\t\t<input type=\"text\" name=\"options[0].optionName\" class=\"form-control\" id=\"inputAddress\" placeholder=\"1234 Main St\">\r\n");
      out.write("    \t\t\t\t<button onclick=\"$(this).parent().remove()\">删除</buttonn>\r\n");
      out.write("  \t\t\t\t</div>\r\n");
      out.write("  \t\t\t\t\r\n");
      out.write("    \t\t\t\r\n");
      out.write("        \t</form>\r\n");
      out.write("      </div>\r\n");
      out.write("      <div class=\"modal-footer\">\r\n");
      out.write("        <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\r\n");
      out.write("        <button type=\"button\" class=\"btn btn-primary\" onclick=\"commitSpec()\">提交</button>\r\n");
      out.write("      </div>\r\n");
      out.write("    </div>\r\n");
      out.write("  </div>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!-- Modal -->\r\n");
      out.write("<div class=\"modal fade\" id=\"staticBackdropUpdate\" data-backdrop=\"static\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"staticBackdropLabel\" aria-hidden=\"true\">\r\n");
      out.write("  <div class=\"modal-dialog\" role=\"document\">\r\n");
      out.write("    <div class=\"modal-content\">\r\n");
      out.write("      <div class=\"modal-header\">\r\n");
      out.write("        <h5 class=\"modal-title\" id=\"staticBackdropLabel\">添加规格</h5>\r\n");
      out.write("         <button type=\"button\" onclick=\"addProp('#updatespec')\"> 添加属性</button>\r\n");
      out.write("         \r\n");
      out.write("        <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\r\n");
      out.write("          <span aria-hidden=\"true\">&times;</span>\r\n");
      out.write("        </button>\r\n");
      out.write("        \t\r\n");
      out.write("      </div>\r\n");
      out.write("      <div class=\"modal-body\">\r\n");
      out.write("        \t<form id=\"updatespec\">\r\n");
      out.write("        \t\t <input type=\"hidden\" name=\"id\" id=\"upId\">\r\n");
      out.write("        \t\t <div class=\"form-group\">\r\n");
      out.write("    \t\t\t\t<label for=\"specName\">规格名称</label>\r\n");
      out.write("    \t\t\t\t<input type=\"text\" class=\"form-control\" name=\"specName\" id=\"upspecName\" aria-describedby=\"specNamelHelp\">\r\n");
      out.write("    \t\t\t\t<small id=\"specNamelHelp\" class=\"form-text text-muted\">请输入规格名称</small>\r\n");
      out.write("  \t\t\t\t</div>\r\n");
      out.write("  \t\t\t\t<div class=\"form-group form-group-proper\">\r\n");
      out.write("    \t\t\t\t<label for=\"inputAddress\">属性值</label>\r\n");
      out.write("    \t\t\t\t<input type=\"text\" name=\"options[0].optionName\" class=\"form-control\" id=\"inputAddress\" placeholder=\"1234 Main St\">\r\n");
      out.write("    \t\t\t\t<button onclick=\"$(this).parent().remove()\">删除</buttonn>\r\n");
      out.write("  \t\t\t\t</div>\r\n");
      out.write("  \t\t\t\t\r\n");
      out.write("    \t\t\t\r\n");
      out.write("        \t</form>\r\n");
      out.write("      </div>\r\n");
      out.write("      <div class=\"modal-footer\">\r\n");
      out.write("        <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\r\n");
      out.write("        <button type=\"button\" class=\"btn btn-primary\" onclick=\"commitUpdateSpec()\">提交</button>\r\n");
      out.write("      </div>\r\n");
      out.write("    </div>\r\n");
      out.write("  </div>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<table class=\"table\">\r\n");
      out.write("\t\r\n");
      out.write("\t<tr> \r\n");
      out.write("\t\t<th>id <input type=\"checkbox\" id=\"allSel\" onchange=\"selectedAll()\">  \r\n");
      out.write("\t\t<button type=\"button\" class=\"btn btn-info btn-sm\" onclick=\"selAll(1)\">全选</button>\r\n");
      out.write("\t\t<button type=\"button\" class=\"btn btn-info btn-sm\" onclick=\"selAll(2)\">全不选</button>\r\n");
      out.write("\t\t<button type=\"button\" class=\"btn btn-info btn-sm\" onclick=\"selAll(3)\">反选</button>\r\n");
      out.write("\t\t </th>\r\n");
      out.write("\t\t<th>名称</th>\r\n");
      out.write("\t\t<th>详情</th>\r\n");
      out.write("\t\t<th>操作</th>\r\n");
      out.write("\t</tr>\r\n");
      out.write("\t");
      if (_jspx_meth_c_005fforEach_005f0(_jspx_page_context))
        return;
      out.write("\r\n");
      out.write("\t\r\n");
      out.write("\t<!-- pageInfo -->\r\n");
      out.write("\t<tr>\r\n");
      out.write("\t\t<td colspan=\"3\">\r\n");
      out.write("\t\t\t");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "../common/page.jsp", out, false);
      out.write("\r\n");
      out.write("\t\t</td>\r\n");
      out.write("\t</tr>\r\n");
      out.write("</table>    \r\n");
      out.write("\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("\tvar addindex=1;\r\n");
      out.write("\t//fomId 标志给那个form 添加属性\r\n");
      out.write("\tfunction addProp(fomId){\r\n");
      out.write("\t\t\t$(fomId).append('<div class=\"form-group form-group-proper\">'+\r\n");
      out.write("    \t\t\t\t'<label for=\"inputAddress\">属性值</label>'+\r\n");
      out.write("    \t\t\t\t'<input type=\"text\" name=\"options['+addindex+'].optionName\" class=\"form-control\" id=\"inputAddress\" placeholder=\"1234 Main St\">'+\r\n");
      out.write("    \t\t\t\t'<button onclick=\"$(this).parent().remove()\">删除</button>'+\r\n");
      out.write("    \t\t\t\t'</div>')\r\n");
      out.write("    \t\t\t\t\r\n");
      out.write("    \t\t\t\t\r\n");
      out.write("    \taddindex++;\r\n");
      out.write("\t} \r\n");
      out.write("\t\r\n");
      out.write("\t// 提交修改\r\n");
      out.write("\tfunction commitUpdateSpec(){\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t//addspec\r\n");
      out.write("\t\tvar formData = new FormData($(\"#updatespec\")[0]);\r\n");
      out.write("\t\t$.ajax({url:\"/spec/update\",\r\n");
      out.write("\t\t\t // dataType:\"json\",\r\n");
      out.write("\t\t\t  data:formData,\r\n");
      out.write("\t\t\t  // 让jQuery 不要再提交数据之前进行处理\r\n");
      out.write("\t\t\t  processData : false,\r\n");
      out.write("\t\t\t  // 提交的数据不能加消息头\r\n");
      out.write("\t\t\t  contentType : false,\r\n");
      out.write("\t\t\t  // 提交的方式 \r\n");
      out.write("\t\t\t  type:\"post\",\r\n");
      out.write("\t\t\t  // 成功后的回调函数\r\n");
      out.write("\t\t\t  success:function(data){\r\n");
      out.write("\t\t\t\t if(data==\"success\"){\r\n");
      out.write("\t\t\t\t\t alert(\"数据提交成功\");\r\n");
      out.write("\t\t\t\t\t $('#staticBackdropUpdate').modal('hide')\r\n");
      out.write("\t\t\t\t }else{\r\n");
      out.write("\t\t\t\t\t alert(\"数据保存失败\")\r\n");
      out.write("\t\t\t\t }\r\n");
      out.write("\t\t\t\t \r\n");
      out.write("\t\t\t  }\r\n");
      out.write("\t\t\t  })\r\n");
      out.write("\t\t\r\n");
      out.write("\t}\r\n");
      out.write("\t// 弹出修改的窗口\r\n");
      out.write("\tfunction openUpdateSpec(id){\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t//清空数据\r\n");
      out.write("\t\t$(\".form-group-proper\").each(function(){\r\n");
      out.write("\t\t\t$(this).remove();\r\n");
      out.write("\t\t})\r\n");
      out.write("\t\taddindex=0;\r\n");
      out.write("\t\t$(\"#upspecName\").val(\"\")\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t$.post(\"/spec/getSpec\",{id:id},function(data){\r\n");
      out.write("\t\t\t//规格的id\r\n");
      out.write("\t\t\t$(\"#upId\").val(data.id)\r\n");
      out.write("\t\t\t$(\"#upspecName\").val(data.specName)\r\n");
      out.write("\t\t\t// 添加规格的选项\r\n");
      out.write("\t\t\taddindex=0;\r\n");
      out.write("\t\t\tfor(var i=0;i<data.options.length;i++){\r\n");
      out.write("\t\t\t\tvar option=data.options[i];\r\n");
      out.write("\t\t\t\t$(\"#updatespec\").append('<div class=\"form-group form-group-proper\">'+\r\n");
      out.write("\t    \t\t\t\t'<label for=\"inputAddress\">属性值</label>'+\r\n");
      out.write("\t    \t\t\t\t'<input type=\"hidden\" name=\"options['+addindex+'].id\" value=\"'+option.id+'\">' +\r\n");
      out.write("\t    \t\t\t\t'<input type=\"text\" name=\"options['+addindex+'].optionName\" value=\"'+option.optionName+'\"class=\"form-control\" id=\"inputAddress\" >'+\r\n");
      out.write("\t    \t\t\t\t'<button onclick=\"$(this).parent().remove()\">删除</button>'+\r\n");
      out.write("\t    \t\t\t\t'</div>')\r\n");
      out.write("\t    \t\taddindex++;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t});\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t$(\"#staticBackdropUpdate\").modal('show')\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\t/**\r\n");
      out.write("\t* 删除规格\r\n");
      out.write("\t*/\r\n");
      out.write("\tfunction delSec(id){\r\n");
      out.write("\t\tif(confirm(\"您确认删除该条数据么？\")){\r\n");
      out.write("\t\t\t$.post(\"/spec/delSpec\",{id:id},function(data){\r\n");
      out.write("\t\t\t\tif(data=\"true\"){\r\n");
      out.write("\t\t\t\t\talert(\"删除成功\")\r\n");
      out.write("\t\t\t\t\trefresh();\r\n");
      out.write("\t\t\t\t}else{\r\n");
      out.write("\t\t\t\t\talert(\"删除失败\")\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t}else{\r\n");
      out.write("\t\t\treturn;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\t/**\r\n");
      out.write("\t\t批量删除\r\n");
      out.write("\t*/\r\n");
      out.write("\tfunction delBatch(){\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tif($(\"[name=ids]:checked\").length<=0){\r\n");
      out.write("\t\t\talert(\"没有数据被选中，不能删除\")\r\n");
      out.write("\t\t\treturn;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t// 组织删除的数据\r\n");
      out.write("\t\tvar delIds  = new Array();\r\n");
      out.write("\t\t$(\"[name=ids]:checked\").each(function(){\r\n");
      out.write("\t\t\tdelIds.push($(this).val());\r\n");
      out.write("\t\t})\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tif(confirm(\"您确认删除这些数据么？\")){\r\n");
      out.write("\t\t\t$.post(\"/spec/delSpecBatch\",{ids:delIds},function(data){\r\n");
      out.write("\t\t\t\tif(data=\"true\"){\r\n");
      out.write("\t\t\t\t\talert(\"删除成功\")\r\n");
      out.write("\t\t\t\t\trefresh();\r\n");
      out.write("\t\t\t\t}else{\r\n");
      out.write("\t\t\t\t\talert(\"删除失败\")\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t}else{\r\n");
      out.write("\t\t\treturn;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\t/**\r\n");
      out.write("\t \t点击全选的checkbox\r\n");
      out.write("\t*/\r\n");
      out.write("\tfunction selectedAll(){\r\n");
      out.write("\t\tvar checked = $(\"#allSel\").prop(\"checked\")\r\n");
      out.write("\t\t// 让每个checkbox 都等于 总的checkbox\r\n");
      out.write("\t\t$(\"[name=ids]\").each(function(){\r\n");
      out.write("\t\t\t\t$(this).prop(\"checked\",checked)\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t)\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\t/**\r\n");
      out.write("\t* 修改一个checkbox\r\n");
      out.write("\t*/\r\n");
      out.write("\tfunction selectedOne(){\r\n");
      out.write("\t\t// 判断是否所有的都被选中了\r\n");
      out.write("\t\tvar allSelected = $(\"[name=ids]\").length==$(\"[name=ids]:checked\").length;\r\n");
      out.write("\t\t//设置全选的框\r\n");
      out.write("\t\t$(\"#allSel\").prop(\"checked\",allSelected)\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\t/**\r\n");
      out.write("\t点击三个按钮\r\n");
      out.write("\t*/\r\n");
      out.write("\tfunction selAll(flag){\r\n");
      out.write("\t\t\r\n");
      out.write("\t \tif(flag==1){\r\n");
      out.write("\t\t\t//全选\r\n");
      out.write("\t\t\t$(\"[name=ids]\").each(function(){\r\n");
      out.write("\t\t\t\t$(this).prop(\"checked\",true)\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t)\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tif(flag==2){\r\n");
      out.write("\t\t\t//全不选\r\n");
      out.write("\t\t\t$(\"[name=ids]\").each(function(){\r\n");
      out.write("\t\t\t\t$(this).prop(\"checked\",false)\r\n");
      out.write("\t\t\t})\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tif(flag==3){\r\n");
      out.write("\t\t\t//反选\r\n");
      out.write("\t\t\t$(\"[name=ids]\").each(function(){\r\n");
      out.write("\t\t\t\tvar ch = !$(this).prop(\"checked\")\r\n");
      out.write("\t\t\t\t$(this).prop(\"checked\",ch)\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t)\r\n");
      out.write("\t\t} \r\n");
      out.write("\t\t// 判断是否所有的都被选中了\r\n");
      out.write("\t\tvar allSelected = $(\"[name=ids]\").length==$(\"[name=ids]:checked\").length;\r\n");
      out.write("\t\t//设置全选的框\r\n");
      out.write("\t\t$(\"#allSel\").prop(\"checked\",allSelected)\r\n");
      out.write("\t\t\r\n");
      out.write("\t}\r\n");
      out.write("\t\t\r\n");
      out.write("    /**\r\n");
      out.write("          查询\r\n");
      out.write("    */\r\n");
      out.write("    function query(){\r\n");
      out.write("\t\tvar url=\"/spec/list?name=\"+$(\"#queryName\").val();\r\n");
      out.write("\t\t$(\"#main\").load(url);\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\t/**\r\n");
      out.write("\t* 分页 \r\n");
      out.write("\t*/\r\n");
      out.write("\tfunction goPage(pagenum){\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tvar url=\"/spec/list?name=\"+$(\"#queryName\").val()+'&page='+pagenum;\r\n");
      out.write("\t\t$(\"#main\").load(url);\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\t/**\r\n");
      out.write("\t* 刷新 而且保持查询条件和页码\r\n");
      out.write("\t*/\r\n");
      out.write("\tfunction refresh(){\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tvar url=\"/spec/list?name=");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${queryName}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\"+'&page=");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageInfo.pageNum}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("';\r\n");
      out.write("\t\t$(\"#main\").load(url);\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t//添加窗口的复位\r\n");
      out.write("\tfunction resetAddForm(){\r\n");
      out.write("\t\t$(\".form-group-proper\").each(function(){\r\n");
      out.write("\t\t\t$(this).remove();\r\n");
      out.write("\t\t})\r\n");
      out.write("\t\taddindex=1;\r\n");
      out.write("\t\t$(\"#specName\").val(\"\")\r\n");
      out.write("\t\t\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\t// 给添加规格模态框增加显示成成功后的事件  \r\n");
      out.write("\t$('#staticBackdrop').on('shown.bs.modal', function (e) {\r\n");
      out.write("\t\t  // do something...\r\n");
      out.write("\t\tresetAddForm();\r\n");
      out.write("\t})\r\n");
      out.write("\t\r\n");
      out.write("\t// 给添加规格模态框增加关闭以后的事件  \r\n");
      out.write("\t$('#staticBackdrop').on('hidden.bs.modal', function (e) {\r\n");
      out.write("\t\t  // do something...\r\n");
      out.write("\t\trefresh();\r\n");
      out.write("\t})\r\n");
      out.write("\t\r\n");
      out.write("\t// 给修改规格模态框增加关闭以后的事件  \r\n");
      out.write("\t$('#staticBackdropUpdate').on('hidden.bs.modal', function (e) {\r\n");
      out.write("\t\t  // do something...\r\n");
      out.write("\t\trefresh();\r\n");
      out.write("\t})\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t/**\r\n");
      out.write("\t  提交数据\t\r\n");
      out.write("\t*/\r\n");
      out.write("\tfunction commitSpec(){\r\n");
      out.write("\t\t//addspec\r\n");
      out.write("\t\tvar formData = new FormData($(\"#addspec\")[0]);\r\n");
      out.write("\t\t$.ajax({url:\"/spec/add\",\r\n");
      out.write("\t\t\t // dataType:\"json\",\r\n");
      out.write("\t\t\t  data:formData,\r\n");
      out.write("\t\t\t  // 让jQuery 不要再提交数据之前进行处理\r\n");
      out.write("\t\t\t  processData : false,\r\n");
      out.write("\t\t\t  // 提交的数据不能加消息头\r\n");
      out.write("\t\t\t  contentType : false,\r\n");
      out.write("\t\t\t  // 提交的方式 \r\n");
      out.write("\t\t\t  type:\"post\",\r\n");
      out.write("\t\t\t  // 成功后的回调函数\r\n");
      out.write("\t\t\t  success:function(data){\r\n");
      out.write("\t\t\t\t if(data==\"true\"){\r\n");
      out.write("\t\t\t\t\t alert(\"数据提交成功\")\r\n");
      out.write("\t\t\t\t\t $('#staticBackdrop').modal('hide')\r\n");
      out.write("\t\t\t\t }else{\r\n");
      out.write("\t\t\t\t\t alert(\"数据保存失败\")\r\n");
      out.write("\t\t\t\t }\r\n");
      out.write("\t\t\t\t \r\n");
      out.write("\t\t\t  }\r\n");
      out.write("\t\t\t  })\r\n");
      out.write("\t\t\r\n");
      out.write("\t}\r\n");
      out.write("</script>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_c_005fforEach_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:forEach
    org.apache.taglibs.standard.tag.rt.core.ForEachTag _jspx_th_c_005fforEach_005f0 = (org.apache.taglibs.standard.tag.rt.core.ForEachTag) _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.get(org.apache.taglibs.standard.tag.rt.core.ForEachTag.class);
    boolean _jspx_th_c_005fforEach_005f0_reused = false;
    try {
      _jspx_th_c_005fforEach_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fforEach_005f0.setParent(null);
      // /WEB-INF/view/spec/list.jsp(111,1) name = items type = javax.el.ValueExpression reqTime = true required = false fragment = false deferredValue = true expectedTypeName = java.lang.Object deferredMethod = false methodSignature = null
      _jspx_th_c_005fforEach_005f0.setItems(new org.apache.jasper.el.JspValueExpression("/WEB-INF/view/spec/list.jsp(111,1) '${pageInfo.list}'",_jsp_getExpressionFactory().createValueExpression(_jspx_page_context.getELContext(),"${pageInfo.list}",java.lang.Object.class)).getValue(_jspx_page_context.getELContext()));
      // /WEB-INF/view/spec/list.jsp(111,1) name = var type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fforEach_005f0.setVar("spec");
      int[] _jspx_push_body_count_c_005fforEach_005f0 = new int[] { 0 };
      try {
        int _jspx_eval_c_005fforEach_005f0 = _jspx_th_c_005fforEach_005f0.doStartTag();
        if (_jspx_eval_c_005fforEach_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
          do {
            out.write("\r\n");
            out.write("\t\t<tr>\r\n");
            out.write("\t\t\t<td><input type=\"checkbox\" name=\"ids\" value=\"");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${spec.id}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("\" onchange=\"selectedOne()\"> ");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${spec.id}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("</td>\r\n");
            out.write("\t\t\t<td>");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${spec.specName}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("</td>\r\n");
            out.write("\t\t\t<td>\r\n");
            out.write("\t\t\t\t");
            if (_jspx_meth_c_005fforEach_005f1(_jspx_th_c_005fforEach_005f0, _jspx_page_context, _jspx_push_body_count_c_005fforEach_005f0))
              return true;
            out.write("\r\n");
            out.write("\t\t\t</td>\r\n");
            out.write("\t\t\t<td>\r\n");
            out.write("\t\t\t\t<button type=\"button\" class=\"btn btn-danger\" onclick=\"delSec(");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${spec.id}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write(")\">删除</button>\r\n");
            out.write("\t\t\t\t<button type=\"button\" class=\"btn btn-warning\" onclick=\"openUpdateSpec(");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${spec.id}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write(")\">修改</button>\r\n");
            out.write("\t\t\t</td>\r\n");
            out.write("\t\t\t\r\n");
            out.write("\t\t</tr>\r\n");
            out.write("\t");
            int evalDoAfterBody = _jspx_th_c_005fforEach_005f0.doAfterBody();
            if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
              break;
          } while (true);
        }
        if (_jspx_th_c_005fforEach_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
          return true;
        }
      } catch (java.lang.Throwable _jspx_exception) {
        while (_jspx_push_body_count_c_005fforEach_005f0[0]-- > 0)
          out = _jspx_page_context.popBody();
        _jspx_th_c_005fforEach_005f0.doCatch(_jspx_exception);
      } finally {
        _jspx_th_c_005fforEach_005f0.doFinally();
      }
      _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.reuse(_jspx_th_c_005fforEach_005f0);
      _jspx_th_c_005fforEach_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fforEach_005f0, _jsp_getInstanceManager(), _jspx_th_c_005fforEach_005f0_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fforEach_005f1(javax.servlet.jsp.tagext.JspTag _jspx_th_c_005fforEach_005f0, javax.servlet.jsp.PageContext _jspx_page_context, int[] _jspx_push_body_count_c_005fforEach_005f0)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:forEach
    org.apache.taglibs.standard.tag.rt.core.ForEachTag _jspx_th_c_005fforEach_005f1 = (org.apache.taglibs.standard.tag.rt.core.ForEachTag) _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.get(org.apache.taglibs.standard.tag.rt.core.ForEachTag.class);
    boolean _jspx_th_c_005fforEach_005f1_reused = false;
    try {
      _jspx_th_c_005fforEach_005f1.setPageContext(_jspx_page_context);
      _jspx_th_c_005fforEach_005f1.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_c_005fforEach_005f0);
      // /WEB-INF/view/spec/list.jsp(116,4) name = items type = javax.el.ValueExpression reqTime = true required = false fragment = false deferredValue = true expectedTypeName = java.lang.Object deferredMethod = false methodSignature = null
      _jspx_th_c_005fforEach_005f1.setItems(new org.apache.jasper.el.JspValueExpression("/WEB-INF/view/spec/list.jsp(116,4) '${spec.options}'",_jsp_getExpressionFactory().createValueExpression(_jspx_page_context.getELContext(),"${spec.options}",java.lang.Object.class)).getValue(_jspx_page_context.getELContext()));
      // /WEB-INF/view/spec/list.jsp(116,4) name = var type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fforEach_005f1.setVar("op");
      int[] _jspx_push_body_count_c_005fforEach_005f1 = new int[] { 0 };
      try {
        int _jspx_eval_c_005fforEach_005f1 = _jspx_th_c_005fforEach_005f1.doStartTag();
        if (_jspx_eval_c_005fforEach_005f1 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
          do {
            out.write("\r\n");
            out.write("\t\t\t\t\t&nbsp;&nbsp; ");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${op.optionName}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("\r\n");
            out.write("\t\t\t\t");
            int evalDoAfterBody = _jspx_th_c_005fforEach_005f1.doAfterBody();
            if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
              break;
          } while (true);
        }
        if (_jspx_th_c_005fforEach_005f1.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
          return true;
        }
      } catch (java.lang.Throwable _jspx_exception) {
        while (_jspx_push_body_count_c_005fforEach_005f1[0]-- > 0)
          out = _jspx_page_context.popBody();
        _jspx_th_c_005fforEach_005f1.doCatch(_jspx_exception);
      } finally {
        _jspx_th_c_005fforEach_005f1.doFinally();
      }
      _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.reuse(_jspx_th_c_005fforEach_005f1);
      _jspx_th_c_005fforEach_005f1_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fforEach_005f1, _jsp_getInstanceManager(), _jspx_th_c_005fforEach_005f1_reused);
    }
    return false;
  }
}
